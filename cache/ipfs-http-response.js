/**
 * Minified by jsDelivr using Terser v5.3.5.
 * Original file: /npm/ipfs-http-response@0.6.2/src/index.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
"use strict";const toStream=require("it-to-stream"),concat=require("it-concat"),toBuffer=require("it-buffer"),log=require("debug")("ipfs:http:response"),resolver=require("./resolver"),pathUtils=require("./utils/path"),detectContentType=require("./utils/content-type"),getHeader=(e=200,t="OK",r={})=>({status:e,statusText:t,headers:r}),handleResolveError=async(e,t,r)=>{const n=r.toString();if(n.includes("dag node is a directory"))try{const n=await resolver.directory(e,t,r.cid);return"string"==typeof n?new Response(n,getHeader(200,"OK",{"Content-Type":"text/html"})):Response.redirect(pathUtils.joinURLParts(t,n[0].Name))}catch(r){return log(r),new Response(n,getHeader(500,r.toString()))}return n.startsWith("Error: no link named")?new Response(n,getHeader(404,n)):n.startsWith("Error: multihash length inconsistent")||n.startsWith("Error: Non-base58 character")?new Response(n,getHeader(400,n)):new Response(n,getHeader(500,n))},getResponse=async(e,t)=>{if(t.endsWith("/"))return Response.redirect(pathUtils.removeTrailingSlash(t));try{const r=await resolver.cid(e,t),{source:n,contentType:s}=await detectContentType(t,e.cat(r.cid));if("undefined"==typeof Blob){const e=toStream.readable(toBuffer(n));return s?new Response(e,getHeader(200,"OK",{"Content-Type":s})):new Response(e,getHeader())}try{const e=await concat(n),t=new Blob([e.slice()]);return s?new Response(t,getHeader(200,"OK",{"Content-Type":s})):new Response(t,getHeader())}catch(e){return new Response(e.toString(),getHeader(500,"Error fetching the file"))}}catch(r){return log(r),handleResolveError(e,t,r)}};module.exports={getResponse:getResponse,resolver:resolver};
//# sourceMappingURL=/sm/497282405041438895759dd3039506ee52394b6657b75865fc8c413e794b4aae.map
